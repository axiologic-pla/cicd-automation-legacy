# This is a basic workflow to help you get started with Actions

name: Build Images

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      nodeBaseImage:
        description: 'node alpine docker image  (e.g. node:x.y.z-alpine)'
        required: true
        default: 'node:18.12.1-alpine'
        type: string
      hubIdentifier:
        description: 'docker repo identifier'
        required: true
        default: 'docker.io'
        type: string
      organizationIdentifier:
        description: 'Organization Registry Identifier (concatenated with hubIdenfier and image name)'
        required: true
        default: 'pharmaledger'
        type: string
      ethTag:
        description: 'Eth Adapter Image tag version'
        required: true
        default: '1.0.0-action-test'
        type: string
      ethUpdateLatestTag:
        description: 'Update Eth Adapter latest tag'
        required: true
        type: boolean
        default: false
      epiTag:
        description: 'ePI tag version'
        required: true
        default: '1.0.0-action-test'
        type: string
      epiUpdateLatestTag:
        description: 'Update ePI latest tag'
        required: true
        type: boolean
        default: false
      epiDevBuildType:
        description: 'ePI DEV build type'
        required: true
        type: boolean
        default: false
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-eth:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: production
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Set env variables
        run: |
          echo "PREVENT_GITHUB_ORGANIZATION=true" >> $GITHUB_ENV
          echo "GITHUB_ORGANIZATION=${{ github.repository_owner }}" >> $GITHUB_ENV

      - name: Clone pl-automation
        run: |
          git clone ${{secrets.CI_CD_AUTOMATION_REPO_URL}} pl-automation
      - name: Update Eth Adapter env values
        run: |
          cd pl-automation/images/ethadapter  
          echo "" > values.sh
          cat > values.sh << EOF
          NODE_ALPINE_BASE_IMAGE='${{ github.event.inputs.nodeBaseImage }}'
          HUB_IDENTIFIER='${{ github.event.inputs.hubIdentifier }}'  
          ETH_ADAPTER_NAME='ethadapter' 
          ETH_ADAPTER_REPO_NAME='${{ github.event.inputs.organizationIdentifier }}/ethadapter'
          EPI_WORKSPACE='http://github.com/${{ github.repository_owner }}/epi-workspace'
          VERSION='${{ github.event.inputs.ethTag }}' 
          if [[ '${{ github.event.inputs.epiDevBuildType }}'=='true' ]]; then
            BUILD_TYPE='dev'
          fi
          EOF

      - name: Run eth adapter build script
        run: |
          cd pl-automation/images/ethadapter
          ./build.sh

      - name: Tag eth adapter image
        run: |
          cd pl-automation/images/ethadapter
          ./tag.sh

      - name: Docker login
        run: docker login ${{ github.event.inputs.hubIdentifier }} -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Publishing the images
        run: docker push ${{ github.event.inputs.organizationIdentifier }}/ethadapter:${{ github.event.inputs.epiTag }}

      - name: Update ePI env values
        run: |
          cd pl-automation/images/epi  
          echo "" > values.sh
          cat > values.sh << EOF
          NODE_ALPINE_BASE_IMAGE='${{ github.event.inputs.nodeBaseImage }}' 
          HUB_IDENTIFIER='${{ github.event.inputs.hubIdentifier }}'  
          BUILDER_NAME='epi-builder'
          BUILDER_REPO_NAME='${{ github.event.inputs.organizationIdentifier }}/epi-builder'
          RUNNER_NAME='epi-runner'
          RUNNER_REPO_NAME='${{ github.event.inputs.organizationIdentifier }}/epi-runner'
          EPI_WORKSPACE='http://github.com/${{ github.repository_owner }}/epi-workspace'
          VERSION='${{ github.event.inputs.epiTag }}'
          if [[ '${{ github.event.inputs.epiDevBuildType }}'=='true' ]]; then
            BUILD_TYPE='dev'
          fi
          EOF

      - name: Run ePI build script
        run: |
          cd pl-automation/images/epi
          ./build.sh

      - name: Tag ePI images
        run: |
          cd pl-automation/images/epi
          ./tag.sh

      - name: Docker login
        run: docker login ${{ github.event.inputs.hubIdentifier }} -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Publishing the images
        run: |
          docker push ${{ github.event.inputs.organizationIdentifier }}/epi-runner:${{ github.event.inputs.epiTag }}
          docker push ${{ github.event.inputs.organizationIdentifier }}/epi-builder:${{ github.event.inputs.epiTag }}