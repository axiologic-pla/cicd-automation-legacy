name: 'Destroy bootstrapping resources'

on:
  workflow_dispatch:
    inputs:
      networkName:
        description: 'Enter the network name'
        required: true
        type: string
      clusterAlias:
        description: 'Enter the name of your cluster'
        required: true
        type: string

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  destroyBootstrappingResources:
    name: 'Destroy bootstrapping resources'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Set env variables
        run: |
          echo "NETWORK_PATH=./private/${{ github.event.inputs.networkName }}" >> $GITHUB_ENV
          echo "CLUSTER_PATH=./private/${{ github.event.inputs.clusterAlias }}/${{ github.event.inputs.networkName }}" >> $GITHUB_ENV
          
          echo "BOOTSTRAP_INFRA_FOLDER_PATH=./private/${{ github.event.inputs.clusterAlias }}/${{ github.event.inputs.networkName }}/bootstrap-cluster" >> $GITHUB_ENV
          echo "BOOTSTRAP_INFRA_TF_STATE_PATH=./private/${{ github.event.inputs.clusterAlias }}/${{ github.event.inputs.networkName }}/bootstrap-cluster/terraform.tfstate" >> $GITHUB_ENV       
          echo "BOOTSTRAP_INFRA_TF_SCRIPTS_PATH=./pl-automation/deployments/terraform/aws-eks-bootstrap-pla/bootstrap-cluster" >> $GITHUB_ENV
          echo "GENERATED_BOOTSTRAP_INFRA_TF_STATE_PATH=./pl-automation/deployments/terraform/aws-eks-bootstrap-pla/bootstrap-cluster/terraform.tfstate" >> $GITHUB_ENV
          
          echo "REGION_FILE_PATH=./private/${{ github.event.inputs.clusterAlias }}/${{ github.event.inputs.networkName }}/region" >> $GITHUB_ENV
          echo "ELASTIC_IP_ALLOCATION_ID_PATH=./private/${{ github.event.inputs.clusterAlias }}/${{ github.event.inputs.networkName }}/elasticIPsAllocationIds" >> $GITHUB_ENV
      # Checkout the repository to the GitHub Actions runner
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GIT_TOKEN }}

      - name: Read elasticIpAllocationId and region
        run: |
          echo "REGION=$(cat $REGION_FILE_PATH)" >> $GITHUB_ENV
          echo "ELASTIC_IP_ALLOCATION_ID=$(cat $ELASTIC_IP_ALLOCATION_ID_PATH)" >> $GITHUB_ENV

      - name: Clone pl-automation
        run: |
          git clone ${{secrets.CI_CD_AUTOMATION_REPO_URL}} pl-automation
      
      - name: Configure AWS Credentials Action For GitHub Actions
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_GH_ACTIONS_ROLE }}
          aws-region: ${{env.REGION}}


      - name: 'Move terraform.tfstate to ./pl-automation/deployments/terraform/aws-eks-bootstrap-pla/bootstrap-cluster if it exists'
        run: |
          if test -f $BOOTSTRAP_INFRA_TF_STATE_PATH; then
            mv $BOOTSTRAP_INFRA_TF_STATE_PATH $BOOTSTRAP_INFRA_TF_SCRIPTS_PATH
          fi

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.

      - name: Terraform Init
        run: terraform -chdir=$BOOTSTRAP_INFRA_TF_SCRIPTS_PATH init

        # On push to "master", build or change bootstrapping resources according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Destroy bootstrap
        run: terraform -chdir=$BOOTSTRAP_INFRA_TF_SCRIPTS_PATH destroy -auto-approve -input=false
        env:
          TF_VAR_account_id: ${{ secrets.ACCOUNT_ID }}
          TF_VAR_region: ${{env.REGION}}
          TF_VAR_eks_cluster_name: ${{ github.event.inputs.clusterAlias }}

      - name: Delete bootstrap folder for cluster
        run: |
          git config --global user.email ${{ secrets.GIT_EMAIL }}
          git config --global user.name ${{ secrets.GIT_USERNAME }}    
          git pull
          rm -rf $BOOTSTRAP_INFRA_FOLDER_PATH
          git add -f $NETWORK_PATH
          git commit -m "Destroyed bootstrap resources for cluster ${{github.event.inputs.clusterAlias}}"
          git push origin master
